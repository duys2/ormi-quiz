2024. 06. 17(월)

/* ---------------- 문제 ---------------- */
1. 인터페이스에서 다른 인터페이스를 상속받으려면 어떤 키워드를 사용해야 하는가?
2. 인터페이스의 다형성 특징에 대해 설명해 주세요.
3. 제네릭을 사용할 시 얻는 장점에 대해 설명해 주세요.
4. 객체지향 5대 원칙인 SOLID에 대한 대문자 약어들을 나열하고 어떤 원칙인지 간단히 설명해 주세요.

/* ---------------- 답 ---------------- */
1. extends
2. 프로그램 소스코드는 크게 변함이 없는데, 구현 객체를 교체하면서 프로그램의 실행 결과가 다양해진다.
=> 하나의 타입에 대입되는 객체에 따라 실행 결과가 다양하게 나온다
3.
- 컴파일 시 미리 타입이 정해지기 때문에, 타입 검사나 변환 같은 번거로운 작업을 생략할 수 있다.
- 클래스나 메서드 내부에서 사용하는 타입 안정성을 높일 수 있다.
=> 컴파일 시 타입 오류 발견 가능 (강한 타입 체킹)
=> 불필요한 타입 캐스팅 안 해도 됨
4.
SRP (Single Responsibility Principle): 단일 책임 원칙
- 클래스는 단 하나의 책임을 가져야 함
+) 메서드는 하나의 기능을 가져야 함
OCP (Open-Closed Principle): 개방-폐쇄 원칙
- 확장에는 열려있고, 변경에는 닫혀있어야 함
LSP (Liskov Substitution Principle): 리스코프 치환 원칙
- 자식 클래스는 부모 클래스로 대체 가능해야 함
ISP (Interface Segregation Principle): 인터페이스 분리 원칙
- 클라이언트는 사용하지 않는 메서드에 의존하지 않아야 함
DIP (Dependency Inversion Principle): 의존 역전 원칙
- 고수준 모듈은 저수준 모듈에 의존하면 안 되며, 추상화에 의존해야 함